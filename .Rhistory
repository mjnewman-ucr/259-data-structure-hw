install.packages("rvest")
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
View(rs_new)
#ANSWER
full_join(rs_new, rs_old, by = Artist, Song)
#ANSWER
full_join(rs_new, rs_old, by = c("Artist", "Song"))
nrow()
#ANSWER
rs_joined_orig <- full_join(rs_new, rs_old, by = c("Artist", "Song"))
nrow(rs_joined_orig)
View(rs_joined_orig)
View(rs_old)
#ANSWER
rs_new %>% mutate(Source = New)
#ANSWER
rs_new %>% mutate(Source = "New")
rs_old %>% as.numeric(c("Year", "Rank") mutate(Source = "Old")
rs_old %>% as.numeric("Year") mutate(Source = "Old")
rs_old %>% as.numeric(c("Year", "Rank")) %>% mutate(Source = "Old")
rs_old %>% as.numeric(c("Year", "Rank")) %>% mutate(Source = "Old", na.rm = TRUE)
rs_old %>% as.numeric(c("Year", "Rank")) #%>% mutate(Source = "Old", na.rm = TRUE)
rs_old %>% as.numeric("Year") #%>% mutate(Source = "Old", na.rm = TRUE)
rs_old %>% as.integer("Year") #%>% mutate(Source = "Old", na.rm = TRUE)
rs_old %>% as.integer("Year", na.rm = TRUE) #%>% mutate(Source = "Old", na.rm = TRUE)
rs_old %>% as.double("Year", na.rm = TRUE) #%>% mutate(Source = "Old", na.rm = TRUE)
rs_old %>% as.double(Year, na.rm = TRUE) #%>% mutate(Source = "Old", na.rm = TRUE)
rs_old %>% as.numeric(Year, na.rm = TRUE) #%>% mutate(Source = "Old", na.rm = TRUE)
rs_old %>% as.numeric("Year", na.rm = TRUE) #%>% mutate(Source = "Old", na.rm = TRUE)
rs_old %>% as.numeric(rs_old$Year, na.rm = TRUE) #%>% mutate(Source = "Old", na.rm = TRUE)
as.numeric(rs_old$Year, na.rm = TRUE) #%>% mutate(Source = "Old", na.rm = TRUE)
rs_old <- as.numeric(rs_old$Year)
rs_old <- as.numeric(rs_old$Rank)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
#ANSWER
rs_joined_orig <- full_join(rs_new, rs_old, by = c("Artist", "Song"))
nrow(rs_joined_orig)
rs_old$Year <- as.numeric(rs_old$Year)
rs_old$Rank <- as.numeric(rs_old$Rank)
rs_old %>% mutate(Source = "Old", na.rm = TRUE)
rs_old %>% mutate(Source = "Old")
bind_rows(rs_old, rs_new)
#ANSWER
rs_new <- rs_new %>% mutate(Source = "New")
rs_old <- rs_old %>% mutate(Source = "Old")
bind_rows(rs_old, rs_new)
rs_all <- bind_rows(rs_old, rs_new)
View(rs_all)
#ANSWER
rs_all %>% str_remove_all(Artist, "[The]")
#ANSWER
rs_all %>% str_remove_all(Artist, "The")
#ANSWER
rs_all %>% str_remove_all(Artist, The)
#ANSWER
rs_all %>% str_remove_all(rs_all$Artist, "The")
#ANSWER
rs_all %>% str_remove_all(Artist, "The", "")
#ANSWER
str_remove_all(rs_all$Artist, "The")
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
#ANSWER
rs_joined_orig <- full_join(rs_new, rs_old, by = c("Artist", "Song"))
nrow(rs_joined_orig)
#ANSWER
rs_new <- rs_new %>% mutate(Source = "New")
rs_old$Year <- as.numeric(rs_old$Year)
rs_old$Rank <- as.numeric(rs_old$Rank)
rs_old <- rs_old %>% mutate(Source = "Old")
rs_all <- bind_rows(rs_old, rs_new)
#ANSWER
str_remove_all(rs_all$Artist, "The")
#ANSWER
str_remove_all(rs_all$Artist, "The ")
#ANSWER
str_remove_all(rs_all$Artist, "The ") %>% str_replace_all(rs_all$Artist, "&", "and")
#ANSWER
str_remove_all(rs_all$Artist, "The ") %>% str_replace_all(rs_all$Artist, "&" = "and")
#ANSWER
str_remove_all(rs_all$Artist, "The ") %>% str_replace_all(rs_all$Artist, "&", "and")
#ANSWER
str_remove_all(rs_all$Artist, "The ") str_replace_all(rs_all$Artist, "&", "and")
str_replace_all(rs_all$Artist, "&", "and")
#ANSWER
str_remove_all(rs_all$Artist, "The ")
str_remove_all(rs_all$Song, "The ")
str_replace_all(rs_all$Artist, "&", "and")
str_replace_all(rs_all$Song, "&", "and")
str_remove_all(rs_all$Song, "[punct]")
str_remove_all(rs_all$Song, "[[punct]]")
str_remove_all(rs_all$Song, "[:punct:]")
#ANSWER
rs_all <- str_remove_all(rs_all$Artist, "The ") %>%
str_remove_all(rs_all$Song, "The ") %>%
str_replace_all(rs_all$Artist, "&", "and") %>%
str_replace_all(rs_all$Song, "&", "and") %>%
str_remove_all(rs_all$Song, "[:punct:]") %>%
str_remove_all(rs_all$Artist, "[:punct:]")
#ANSWER
rs_all %>% str_remove_all(Artist, "The ")
#ANSWER
rs_all %>% str_remove_all($Artist, "The ")
#ANSWER
rs_all %>% str_remove_all("Artist", "The ")
#ANSWER
rs_all <- str_remove_all(rs_all$Artist, "The ")
rs_all <- str_remove_all(rs_all$Song, "The ")
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
### Question 1 ----------
# Use "full_join" to merge the old and new datasets, rs_new and rs_old,
# by Artist AND Song. Save the results to a dataset called rs_joined_orig
# If the merged worked, each song-artist combination that appears in both
# datasets should now be in a single row with the old/new ranks
# Use the nrow() function to see how many rows of data there are
# In the viewer, take a look at the merge...what kinds of problems are there?
# Why did some of the artist-song fail to match up?
#ANSWER
rs_joined_orig <- full_join(rs_new, rs_old, by = c("Artist", "Song"))
nrow(rs_joined_orig)
#There are a lot of "extra" rows! I think it is because some artists/songs are in
#one data set but not the other. For example, Kanye is not in the old ds
### Question 2 ----------
# To clean up the datasets, it would be more efficient to put them into a single data set
# Add a new variable to each dataset called "Source" with value "New" for rs_new and
# "Old" for rs_old. Then use bind_rows to join the two datasets into a single one called rs_all
# You will run into a problem because the old dataset has rank/year as characters instead of integers
# Make Rank and Year into integer variables for rs_old before binding them into rs_all
#ANSWER
rs_new <- rs_new %>% mutate(Source = "New")
rs_old$Year <- as.numeric(rs_old$Year)
rs_old$Rank <- as.numeric(rs_old$Rank)
rs_old <- rs_old %>% mutate(Source = "Old")
rs_all <- bind_rows(rs_old, rs_new)
#ANSWER
rs_all$Artist <- str_remove_all(rs_all$Artist, "The ")
rs_all$Song <- str_remove_all(rs_all$Song, "The ")
rs_all$Artist <- str_replace_all(rs_all$Artist, "&", "and")
rs_all$Song <- str_replace_all(rs_all$Song, "&", "and")
rs_all&Song <- str_remove_all(rs_all$Song, "[:punct:]")
rs_all$Song <- str_remove_all(rs_all$Song, "[:punct:]")
rs_all$Artist <- str_remove_all(rs_all$Artist, "[:punct:]")
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
#ANSWER
rs_joined_orig <- full_join(rs_new, rs_old, by = c("Artist", "Song"))
nrow(rs_joined_orig)
#ANSWER
rs_new <- rs_new %>% mutate(Source = "New")
rs_old$Year <- as.numeric(rs_old$Year)
rs_old$Rank <- as.numeric(rs_old$Rank)
rs_old <- rs_old %>% mutate(Source = "Old")
rs_all <- bind_rows(rs_old, rs_new)
#ANSWER
rs_all$Artist <- str_remove_all(rs_all$Artist, "The ")
rs_all$Song <- str_remove_all(rs_all$Song, "The ")
rs_all$Artist <- str_replace_all(rs_all$Artist, "&", "and")
rs_all$Song <- str_replace_all(rs_all$Song, "&", "and")
rs_all$Song <- str_remove_all(rs_all$Song, "[:punct:]")
rs_all$Artist <- str_remove_all(rs_all$Artist, "[:punct:]")
View(rs_joined_orig)
View(rs_all)
#ANSWER
rs_all %>% filter(Source = "Old")
#ANSWER
rs_all %>% filter(Source == "Old")
View(rs_new)
View(rs_old)
View(rs_all)
#ANSWER
rs_old <- rs_all %>% filter(Source == "Old")
View(rs_old)
rs_new <- rs_all %>% filter(Source == "New")
View(rs_new)
full_join(rs_old, rs_new, by = c("Artist", "Song"))
View(rs_old)
View(rs_new)
full_join(rs_old, rs_new, by = c("Artist", "Song"), suffix = c("_Old", "_New"))
full_join(rs_new, rs_old, by = c("Artist", "Song"), suffix = c("_New", "_Old"))
full_join(rs_new, rs_old, by = c("Artist" = "Song"), suffix = c("_New", "_Old"))
full_join(rs_new, rs_old, by = c("Artist", "Song"), suffix = c("_New", "_Old"))
full_join(rs_new, rs_old, by = c("Artist", "Song"), suffix = c("_New", "_Old"))
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
#ANSWER
rs_joined_orig <- full_join(rs_new, rs_old, by = c("Artist", "Song"))
nrow(rs_joined_orig)
#ANSWER
rs_new <- rs_new %>% mutate(Source = "New")
rs_old$Year <- as.numeric(rs_old$Year)
rs_old$Rank <- as.numeric(rs_old$Rank)
rs_old <- rs_old %>% mutate(Source = "Old")
rs_all <- bind_rows(rs_old, rs_new)
#ANSWER
rs_all$Artist <- str_remove_all(rs_all$Artist, "The")
rs_all$Song <- str_remove_all(rs_all$Song, "The")
rs_all$Artist <- str_replace_all(rs_all$Artist, "&", "and")
rs_all$Song <- str_replace_all(rs_all$Song, "&", "and")
rs_all$Song <- str_remove_all(rs_all$Song, "[:punct:]")
rs_all$Artist <- str_remove_all(rs_all$Artist, "[:punct:]")
rs_all$Artist <- str_to_lower(rs_all$Artist, locale = "en")
View(rs_all)
rs_all$Song <- str_to_lower(rs_all$Song, locale = "en")
rs_all$Artist <- str_trim(rs_all$Artist, side = "both")
rs_all$Song <- str_trim(rs_all$Song, side = "both")
#ANSWER
rs_old <- rs_all %>% filter(Source == "Old")
rs_new <- rs_all %>% filter(Source == "New")
View(rs_new)
View(rs_old)
full_join(rs_new, rs_old, by = c("Artist", "Song"), suffix = c("_New", "_Old"))
rs_joined <-full_join(rs_new, rs_old, by = c("Artist", "Song"), suffix = c("_New", "_Old"))
View(rs_joined)
nrow()
nrow(rs_joined)
#ANSWER
rs_joined %>% filter(-c(Source_New, Source_Old))
#ANSWER
rs_joined %>% filter(-c("Source_New", "Source_Old"))
#ANSWER
rs_joined %>% select(-(Source_Old, Source_New))
#ANSWER
rs_joined %>% select(-c(Source_Old, Source_New))
#ANSWER
rs_joined <- rs_joined %>% select(-c(Source_Old, Source_New))
View(rs_joined)
rs_joined %>% filter(-is.na())
rs_joined %>% filter(-is.na(Rank_Old))
rs_joined %>% filter(-c(is.na(Rank_Old)))
rs_joined %>% filter(is.na(Rank_Old))
rs_joined %>% filter(-is.na(Rank_Old))
rs_joined %>% filter(-(is.na(Rank_Old)))
rs_joined %>% filter(-c(is.na(Rank_Old)))
rs_joined %>% filter(!(is.na(Rank_Old))
rs_joined %>% filter(!Rank_Old %in% is.na = T))
rs_joined %>% filter(!(Rank_Oldis.na = T))
rs_joined %>% filter(!(Rank_Old, is.na = T))
rs_joined %>% filter(!Rank_Old %in% is.na = T))
rs_joined %>% filter(!Rank_Old %in% is.na == T))
filter(rs_joined, !(Rank_Old %in% is.na == T))
filter(rs_joined, is.na(Rank_Old))
filter(rs_joined, !is.na(Rank_Old))
rs_joined$Rank_Old <- filter(rs_joined, !is.na(Rank_Old))
filter(rs_joined, !is.na(Rank_Old))
filter(rs_joined$Rank_Old, !is.na(Rank_Old))
test <- filter(rs_joined, !is.na(Rank_Old))
View(test)
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
#ANSWER
rs_joined_orig <- full_join(rs_new, rs_old, by = c("Artist", "Song"))
nrow(rs_joined_orig)
#ANSWER
rs_new <- rs_new %>% mutate(Source = "New")
rs_old$Year <- as.numeric(rs_old$Year)
rs_old$Rank <- as.numeric(rs_old$Rank)
rs_old <- rs_old %>% mutate(Source = "Old")
rs_all <- bind_rows(rs_old, rs_new)
#ANSWER
rs_all$Artist <- str_remove_all(rs_all$Artist, "The")
rs_all$Song <- str_remove_all(rs_all$Song, "The")
rs_all$Artist <- str_replace_all(rs_all$Artist, "&", "and")
rs_all$Song <- str_replace_all(rs_all$Song, "&", "and")
rs_all$Song <- str_remove_all(rs_all$Song, "[:punct:]")
rs_all$Artist <- str_remove_all(rs_all$Artist, "[:punct:]")
rs_all$Artist <- str_to_lower(rs_all$Artist, locale = "en")
rs_all$Song <- str_to_lower(rs_all$Song, locale = "en")
rs_all$Artist <- str_trim(rs_all$Artist, side = "both")
rs_all$Song <- str_trim(rs_all$Song, side = "both")
View(rs_all)
#ANSWER
rs_old <- rs_all %>% filter(Source == "Old")
rs_new <- rs_all %>% filter(Source == "New")
View(rs_new)
View(rs_old)
View(rs_new)
View(rs_all)
View(rs_new)
View(rs_old)
full_join(rs_new, rs_old, by = c("Artist", "Song"), suffix = c("_New", "_Old"))
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
#ANSWER
rs_joined_orig <- full_join(rs_new, rs_old, by = c("Artist", "Song"))
nrow(rs_joined_orig)
View(rs_new)
View(rs_old)
View(rs_new)
View(rs_old)
#ANSWER
rs_new <- rs_new %>% mutate(Source = "New")
View(rs_new)
rs_old$Year <- as.numeric(rs_old$Year)
rs_old$Rank <- as.numeric(rs_old$Rank)
rs_old <- rs_old %>% mutate(Source = "Old")
rs_new <- arrange(rs_new, desc("Rank"))
rs_new <- arrange(rs_new, desc("Rank"))
rs_new <- arrange(rs_new, Rank)
rs_all <- bind_rows(rs_old, rs_new)
View(rs_all)
rs_all$Artist <- str_remove_all(rs_all$Artist, "The")
rs_all$Song <- str_remove_all(rs_all$Song, "The")
rs_all$Artist <- str_replace_all(rs_all$Artist, "&", "and")
rs_all$Song <- str_replace_all(rs_all$Song, "&", "and")
rs_all$Song <- str_remove_all(rs_all$Song, "[:punct:]")
rs_all$Artist <- str_remove_all(rs_all$Artist, "[:punct:]")
rs_all$Artist <- str_to_lower(rs_all$Artist, locale = "en")
rs_all$Song <- str_to_lower(rs_all$Song, locale = "en")
rs_all$Artist <- str_trim(rs_all$Artist, side = "both")
rs_all$Song <- str_trim(rs_all$Song, side = "both")
#ANSWER
rs_old <- rs_all %>% filter(Source == "Old")
rs_new <- rs_all %>% filter(Source == "New")
full_join(rs_new, rs_old, by = c("Artist", "Song"), suffix = c("_New", "_Old"))
rs_joined <-full_join(rs_new, rs_old, by = c("Artist", "Song"), suffix = c("_New", "_Old"))
nrow(rs_joined)
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
#ANSWER
rs_joined_orig <- full_join(rs_new, rs_old, by = c("Artist", "Song"))
View(rs_joined_orig)
nrow(rs_joined_orig)
#ANSWER
rs_new <- rs_new %>% mutate(Source = "New")
rs_old$Year <- as.numeric(rs_old$Year)
rs_old$Rank <- as.numeric(rs_old$Rank)
rs_old <- rs_old %>% mutate(Source = "Old")
rs_new <- arrange(rs_new, Rank)
rs_all <- bind_rows(rs_old, rs_new)
View(rs_all)
#ANSWER
rs_all$Artist <- str_remove_all(rs_all$Artist, "The")
rs_all$Song <- str_remove_all(rs_all$Song, "The")
rs_all$Artist <- str_replace_all(rs_all$Artist, "&", "and")
rs_all$Song <- str_replace_all(rs_all$Song, "&", "and")
rs_all$Song <- str_remove_all(rs_all$Song, "[:punct:]")
rs_all$Artist <- str_remove_all(rs_all$Artist, "[:punct:]")
rs_all$Artist <- str_to_lower(rs_all$Artist, locale = "en")
rs_all$Song <- str_to_lower(rs_all$Song, locale = "en")
rs_all$Artist <- str_trim(rs_all$Artist, side = c("both", "left", "right"))
rs_all$Song <- str_trim(rs_all$Song, side = c("both", "left", "right"))
#ANSWER
rs_old <- rs_all %>% filter(Source == "Old")
rs_new <- rs_all %>% filter(Source == "New")
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
#ANSWER
rs_joined_orig <- full_join(rs_new, rs_old, by = c("Artist", "Song"))
nrow(rs_joined_orig)
#ANSWER_KEY
rs_old <- rs_old %>% mutate(Rank = as.integer(Rank), Year = as.integer(Year), Source = "Old")
rs_new <- rs_new %>% mutate(Source = "New")
rs_all <- bind_rows(rs_new, rs_old)
#ANSWER_KEY
rs_all <- rs_all %>% mutate(Artist = str_remove_all(Artist, "The"),
Artist = str_replace_all(Artist, "&", "and"),
Artist = str_remove_all(Artist, "[:punct:]"),
Artist = str_to_lower(str_trim(Artist)))
rs_all <- rs_all %>% mutate(Song = str_remove_all(Song, "The"),
Song = str_replace_all(Song, "&", "and"),
Song = str_remove_all(Song, "[:punct:]"),
Song = str_to_lower(str_trim(Song)))
#ANSWER_KEY
temp_new <- rs_all %>% filter(Source == "New")
temp_old <- rs_all %>% filter(Source == "Old")
rs_joined <- full_join(temp_old, temp_new, by = c("Artist", "Song"), suffix = c("_Old","_New"))
nrow(rs_joined)
View(rs_joined)
#ANSWER_KEY
rs_joined <- rs_joined %>%
select(-starts_with("Source")) %>%
filter(!is.na(Rank_New), !is.na(Rank_Old)) %>%
mutate(Rank_Change = Rank_Old - Rank_New) %>%
arrange(Rank_Change)
View(rs_joined)
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
#ANSWER
rs_joined_orig <- full_join(rs_new, rs_old, by = c("Artist", "Song"))
nrow(rs_joined_orig)
#ANSWER_KEY
rs_old <- rs_old %>% mutate(Rank = as.integer(Rank), Year = as.integer(Year), Source = "Old")
rs_new <- rs_new %>% mutate(Source = "New")
rs_all <- bind_rows(rs_new, rs_old)
#ANSWER_KEY
rs_all <- rs_all %>% mutate(Artist = str_remove_all(Artist, "The"),
Artist = str_replace_all(Artist, "&", "and"),
Artist = str_remove_all(Artist, "[:punct:]"),
Artist = str_to_lower(str_trim(Artist)))
rs_all <- rs_all %>% mutate(Song = str_remove_all(Song, "The"),
Song = str_replace_all(Song, "&", "and"),
Song = str_remove_all(Song, "[:punct:]"),
Song = str_to_lower(str_trim(Song)))
#ANSWER_KEY
temp_new <- rs_all %>% filter(Source == "New")
temp_old <- rs_all %>% filter(Source == "Old")
rs_joined <- full_join(temp_old, temp_new, by = c("Artist", "Song"), suffix = c("_Old","_New"))
nrow(rs_joined)
View(rs_joined)
#ANSWER_KEY
rs_joined <- rs_joined %>%
select(-starts_with("Source")) %>%
filter(!is.na(Rank_New), !is.na(Rank_Old)) %>%
mutate(Rank_Change = Rank_Old - Rank_New) %>%
arrange(Rank_Change)
